#include <iostream>
using namespace std;
#include <string>

class person
{
public:
	int m_a;
	int m_b;
public:
	person(int a = 0, int b = 0)   //构造函数
	{
		m_a = a;
		m_b = b;
	}
};

 person operator+(person &p1,person &p2)                     //全局函数重载
{
	person temp;
	temp.m_a = p1.m_a + p2.m_a;
	temp.m_b = p1.m_b + p2.m_b;
	return temp;
}

int main() 
{
	person p1(10,10);
	person p2(20,30);
	person p3;
	p3 = p1 + p2;                                               //全局函数重载
	cout <<"p3的属性分别为" << p3.m_a<<"   " << p3.m_b << endl;
	return 0;
}




除此之外还可以用成员函数重载：



#include <iostream>
using namespace std;
#include <string>

class person
{
public:
	int m_a;
	int m_b;
public:
	person(int a = 0, int b = 0) 
	{
		m_a = a;
		m_b = b;
	}
	person operator+(person& p1)                  //成员函数重载
	{
		person temp;
		temp.m_a = this->m_a + p1.m_a ;
		temp.m_b = this->m_b + p1.m_b ;
		return temp;
	}

};



int main() 
{
	person p1(10,10);
	person p2(20,30);
	person p3;
	p3 = p1 + p2;                                //成员函数重载
	cout <<"p3的属性分别为" << p3.m_a<<"   " << p3.m_b << endl;
	return 0;
}
