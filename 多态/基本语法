//静态多态 ：函数重载和运算符重载属于静态多态
//动态多态：派生类和虚函数实现运行时多态
//区别：静态函数地址在编译阶段确定，动态函数地址在运行阶段确定





#include <iostream>
using namespace std;
#include <string>



class Animal
{
public:
    virtual void speak()                   //加上virtual 此时speak函数是虚函数，编译器在编译的时候不能确定函数调用了
    {
        cout << "动物在叫" << endl;
    }
};

class Cat :public Animal
{   public:
    void speak()
    {
        cout << "小猫在叫" << endl;
    }

};

class Dog :public Animal
{   public:
    void speak()
    {
        cout << "小狗在叫" << endl;
    }

};

//我们希望传入什么对象就调用什么函数
//如果函数地址在编译阶段就确定那么就是静态联编
//如果函数地址在运行阶段才能确定就是动态联编
void dospeak(Animal &animal)
{
    animal.speak();
}


//多态满足条件：
// 1.有继承关系 
// 2.子类重写父类的虚函数 重写 （返回值类型 函数名 参数全部一致）


void test01()
{
    Cat cat;
   dospeak(cat);
}
int main()
{
    test01();
    system("pause");
    return 0;
}
