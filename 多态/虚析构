#include <iostream>
using namespace std;

// 基类
class Base
{
public:
    Base()
    {
        cout << "Base 构造函数" << endl;
    }

    // 虚析构函数
    virtual ~Base()
    {
        cout << "Base 析构函数" << endl;
    }
};

// 派生类
class Derived : public Base
{
public:
    Derived()
    {
        cout << "Derived 构造函数" << endl;
    }

    ~Derived()
    {
        cout << "Derived 析构函数" << endl;
    }
};

int main()
{
    Base* ptr = new Derived(); // 基类指针指向派生类对象
    delete ptr; // 通过基类指针删除对象

    return 0;
}











#include <iostream>
using namespace std;

// 抽象基类
class Base
{
public:
    Base()
    {
        cout << "Base 构造函数" << endl;
    }

    // 纯虚析构函数
    virtual ~Base() = 0;
};

// 纯虚析构函数的实现
Base::~Base()
{
    cout << "Base 析构函数" << endl;
}

// 派生类
class Derived : public Base
{
public:
    Derived()
    {
        cout << "Derived 构造函数" << endl;
    }

    ~Derived()
    {
        cout << "Derived 析构函数" << endl;
    }
};

int main()
{
    Base* ptr = new Derived(); // 基类指针指向派生类对象
    delete ptr; // 通过基类指针删除对象

    return 0;
}
